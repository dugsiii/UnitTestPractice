        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:#include <cctype>
        -:    4:using std::string;
        -:    5:
        -:    6:
        -:    7:/*
        -:    8:  The function receives a string counts how many times the same character 
        -:    9:  occurs at the beginning of the string, before any other characters (or the
        -:   10:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   11:  'z' and any ASCII characters are allowed.
        -:   12:*/
function _ZN8Password24count_leading_charactersENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 33 returned 100% blocks executed 100%
       33:   13:int Password::count_leading_characters(string phrase){
       33:   14:  int repetition = 1;
       33:   15:  int index = 0;
        -:   16:
       38:   17:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
call    0 returned 38
branch  1 taken 36 (fallthrough)
branch  2 taken 2
call    3 returned 36
call    4 returned 36
branch  5 taken 5 (fallthrough)
branch  6 taken 31
branch  7 taken 5
branch  8 taken 33 (fallthrough)
        5:   18:    repetition++;
        5:   19:    index++;
        -:   20:  }
       33:   21:  return repetition;
        -:   22:}
        -:   23:
        -:   24:  /*
        -:   25:  returns whether the phrase has both at least one upper-case letter and
        -:   26:  at least one lower-case letter
        -:   27:  */
        -:   28:  
function _ZN8Password14has_mixed_caseENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 32 returned 100% blocks executed 100%
       32:   29:  bool Password::has_mixed_case(string phrase){
       32:   30:    if (phrase.length() >= 2){
call    0 returned 32
branch  1 taken 30 (fallthrough)
branch  2 taken 2
       30:   31:      int index = 0;
       44:   32:      while( index < phrase.length()-1){
call    0 returned 44
branch  1 taken 40
branch  2 taken 4 (fallthrough)
       66:   33:        if ((isupper(phrase[index]) && islower(phrase[index + 1])) 
call    0 returned 40
call    1 returned 26
branch  2 taken 1 (fallthrough)
branch  3 taken 25
       80:   34:          || 
branch  0 taken 26 (fallthrough)
branch  1 taken 14
branch  2 taken 26 (fallthrough)
branch  3 taken 14
       15:   35:          (isupper(phrase[index + 1]) && islower(phrase[index])) ){
call    0 returned 15
branch  1 taken 3 (fallthrough)
branch  2 taken 12
call    3 returned 3
branch  4 taken 1 (fallthrough)
branch  5 taken 2
       26:   36:          return true;
        -:   37:        }
       14:   38:        index++;
        -:   39:      }
        -:   40:    }
        6:   41:    return false;
        -:   42:  }
        -:   43:
        -:   44:  /*
        -:   45:  constructor sets the default password to "ChicoCA-95929"
        -:   46:  */
function _ZN8PasswordC2Ev called 20 returned 100% blocks executed 56%
       20:   47:  Password::Password(){
call    0 returned 20
       20:   48:    set("ChicoCA-95929");
call    0 returned 20
call    1 returned 20
branch  2 taken 20 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 20
branch  5 taken 20 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 20
call    8 returned 20
call    9 never executed
call   10 never executed
       20:   49:    return;
    =====:   50:  }
call    0 never executed
        -:   51:
        -:   52:  /*
        -:   53:  receives a password and sets the latest in pass_history to it if and only
        -:   54:  if it meets all criteria:
        -:   55:    1. The password is at least 8 letters long
        -:   56:    2. It has no more than 3 of the same leading characters
        -:   57:    3. It has mixed case (at least one upper case and at least one lower case)
        -:   58:    4. It was not a previous password in the history
        -:   59:  */
function _ZN8Password3setENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 27 returned 100% blocks executed 79%
       27:   60:  void Password::set(string phrase){
      106:   61:    if (phrase.length() >= 8 && 
       79:   62:        count_leading_characters(phrase) < 3 &&
call    0 returned 27
branch  1 taken 26 (fallthrough)
branch  2 taken 1
call    3 returned 26
branch  4 taken 26 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 26
branch  7 taken 26 (fallthrough)
branch  8 taken 0 (throw)
branch  9 taken 25 (fallthrough)
branch 10 taken 1
call   11 returned 26
branch 12 taken 24 (fallthrough)
branch 13 taken 3
branch 14 never executed
branch 15 never executed
call   16 never executed
       52:   63:        has_mixed_case(phrase)){
call    0 returned 25
branch  1 taken 25 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 25
branch  4 taken 25 (fallthrough)
branch  5 taken 0 (throw)
branch  6 taken 24 (fallthrough)
branch  7 taken 1
branch  8 taken 25 (fallthrough)
branch  9 taken 2
call   10 returned 25
branch 11 taken 26 (fallthrough)
branch 12 taken 1
branch 13 never executed
branch 14 never executed
call   15 never executed
       29:   64:        for(int i = 0; i < Password::pass_history.size(); i++){
call    0 returned 29
branch  1 taken 6
branch  2 taken 23 (fallthrough)
        6:   65:          if (Password::pass_history[i] == phrase){
call    0 returned 6
call    1 returned 6
branch  2 taken 1 (fallthrough)
branch  3 taken 5
        1:   66:            return;
        -:   67:          }
        -:   68:        }
       23:   69:        Password::pass_history.push_back(phrase);
call    0 returned 23
        -:   70:    }
        -:   71:  }
        -:   72:
        -:   73:  /*
        -:   74:  receives a string and authenticates it against the latest password in the
        -:   75:  pass_history, returning true for an exact match or false when it does not match
        -:   76:  or if a password has not been set.
        -:   77:  */
function _ZN8Password12authenticateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 100%
        6:   78:  bool Password::authenticate(string phrase){
        6:   79:    if (phrase == Password::pass_history.back()){
call    0 returned 6
call    1 returned 6
branch  2 taken 2 (fallthrough)
branch  3 taken 4
        2:   80:      return true;
        -:   81:    }
        -:   82:    else{
        4:   83:      return false;
        -:   84:    }
        -:   85:  }
